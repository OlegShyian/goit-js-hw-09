{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEaC,SAASC,cAAc,QAC/BC,iBAAiB,UAOtB,SAA0BC,GACxBA,EAAEC,iBAOF,IANA,IAA8BC,EAAA,CAC5BC,MAAOC,OAAOJ,EAAEK,OAAOF,MAAMG,OAC7BC,KAAMH,OAAOJ,EAAEK,OAAOE,KAAKD,OAC3BE,OAAQJ,OAAOJ,EAAEK,OAAOG,OAAOF,QAH3BC,EAAwBL,EAAxBK,KAAMC,EAAkBN,EAAlBM,OAAQC,EAAUP,EAAVC,MAMXO,EAAI,EAAGA,EAAIF,EAAQE,IAC1BC,EAAcD,EAAI,EAAGD,GAClBG,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUX,EAAKU,EAALV,M,OACjBY,YAAW,WACTC,EACEC,EACA,mBAAkCC,OAAfJ,EAAS,QAAYI,OAANf,EAAM,SAEzCA,MAEJgB,OAAM,SAAAN,G,IAAGC,EAAQD,EAARC,SAAUX,EAAKU,EAALV,M,OAClBY,YAAW,WACTC,EACEC,EACA,oBAAmCC,OAAfJ,EAAS,QAAYI,OAANf,EAAM,SAE1CA,MAEPM,GAASF,KA/Bb,IAAMU,EACK,UADLA,EAEE,UAiCR,SAASN,EAAcG,EAAUX,GAC/B,IAAMiB,EAAO,CAAEN,WAAUX,SACnBkB,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,OAAIL,EACKI,EAAQL,GAERM,EAAON,MAKpB,SAASJ,EAAWW,EAAMC,G,IAASC,EAAAC,UAAAC,OAAA,YAAAD,UAAA,GAAcA,UAAA,GAAJ,IAC3CnC,EAAAqC,OAAOL,GAAMC,EAAS,CAAEC,a","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('form');\nform.addEventListener('submit', generatePromises);\n\nconst notifyTypes = {\n  success: 'success',\n  fail: 'failure',\n};\n\nfunction generatePromises(e) {\n  e.preventDefault();\n  let { step, amount, delay } = {\n    delay: Number(e.target.delay.value),\n    step: Number(e.target.step.value),\n    amount: Number(e.target.amount.value),\n  };\n\n  for (let i = 0; i < amount; i++) {\n    createPromise(i + 1, delay)\n      .then(({ position, delay }) =>\n        setTimeout(() => {\n          showNotify(\n            notifyTypes.success,\n            `Fulfill promise ${position} in ${delay}ms`\n          );\n        }, delay)\n      )\n      .catch(({ position, delay }) =>\n        setTimeout(() => {\n          showNotify(\n            notifyTypes.fail,\n            `Rejected promise ${position} in ${delay}ms`\n          );\n        }, delay)\n      );\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const data = { position, delay };\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      return resolve(data);\n    } else {\n      return reject(data);\n    }\n  });\n}\n\nfunction showNotify(type, message, timeout = 4000) {\n  Notify[type](message, { timeout });\n}\n"],"names":["$h6c0i","parcelRequire","document","querySelector","addEventListener","e","preventDefault","ref","delay","Number","target","value","step","amount","delay1","i","$ce04d3a99e08e73b$var$createPromise","then","param","position","setTimeout","$ce04d3a99e08e73b$var$showNotify","$ce04d3a99e08e73b$var$notifyTypes","concat","catch","data","shouldResolve","Math","random","Promise","resolve","reject","type","message","timeout","arguments","length","Notify"],"version":3,"file":"03-promises.379c51d7.js.map"}